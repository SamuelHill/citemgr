import com.github.rjeschke.txtmark.*
import org.apache.tools.ant.filters.*

apply plugin: "base"
apply plugin:  "groovy"
apply plugin:  "maven"

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath group: 'com.github.rjeschke', name: 'txtmark', version: '0.11'
  }
}

repositories {
    mavenCentral()
    
    maven {
        url "http://beta.hpcc.uh.edu/nexus/content/groups/public"
    }
    maven {
      url "https://oss.sonatype.org"
    }
}

configurations {
  lib
}

dependencies {
  compile group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyVersion
  // needed for hocuspocus:
  compile group: 'com.thaiopensource', name:'jing', version: jingVersion
  compile group: 'net.sf.saxon', name: 'saxon-dom', version: saxonVersion
  compile group: 'net.sf.opencsv', name: 'opencsv', version: '2.3'

  // dependencies from versionMap
  compile group: 'edu.holycross.shot', name: 'nysi', version: versionMap['nysi']
  compile group: 'edu.holycross.shot', name : 'hocuspocus' , version: versionMap['hocuspocus']
  compile group : 'edu.holycross.shot', name : 'prestochango', version : versionMap['prestochango']
  compile group : 'edu.holycross.shot', name : 'abracadabra', version : versionMap['abracadabra']
  compile group: 'edu.harvard.chs', name: 'cite', version: versionMap['cite']
  //compile group: 'edu.harvard.chs', name : 'greekutils' , version: versionMap['greekutils']
  //compile group:       'org.homermultitext', name : 'hmt-utils', version: versionMap["hmtutils"]


  testCompile 'junit:junit:4.11'
  testCompile 'org.concordion:concordion:1.4.4'

  testCompile group :'xmlunit', name: 'xmlunit', version: xmlunitVersion
}


uploadArchives {
    repositories.mavenDeployer {
        repository(url: nexusRepo) {
            authentication (userName: nexusUser, password: nexusPassword)
        }
    }
}


artifacts {
  lib jar
}

uploadLib {
  repositories.mavenDeployer {
    repository(url: nexusRepo) {                   
      authentication (userName: nexusUser, password: nexusPassword)
    }
  }
  doLast {
    System.err.println "Code library uploaded."
  }
}


// ****************************************************************** //
// for specs with concordion:



sourceSets {
    main {
        java {
            srcDir 'core/src'
        }
        resources {
            srcDir 'core/src'
        }
    }
    test {
        java {
	  srcDir "specs/java"
        }
        resources {
	  srcDir "${buildDir}/specs"
        }
    }
}

task cpResources(type: Copy) {
  from "specs/resources"
  into "${buildDir}/specs"
}

task setUpResources(dependsOn: cpResources) {
}
setUpResources.doLast {
  println "READING FILE TREE FROM " + mdSrc
  FileTree tree = fileTree("${project.rootDir}/${mdSrc}") {
    include "**/*.md"
  }
  tree.visit { f ->
    if (f.relativePath.isFile()) {
      File inFile = new File("${project.rootDir}/${mdSrc}/${f.relativePath}")
      println "Need to work on " + inFile
      def segs = f.relativePath.getSegments()
      String treePath = "${buildDir}/specs"
      Integer limit =  segs.size() - 1
      segs.eachWithIndex { s, i ->
	if (i < limit) {
	  treePath = "${treePath}/${s}"
	  File nxtDir = new File(treePath)
	  if (! nxtDir.exists()) {
	    nxtDir.mkdir()
	  }
	}
      }
      File outDir = new File(treePath)
      String htmlFileName = f.relativePath.getLastName().replaceFirst(/.md$/,".html")
      File htmlFile = new File(outDir, htmlFileName)
      println "Created ${htmlFile}"
      try {
	String body = Processor.process(inFile.getText("UTF-8"),Configuration.DEFAULT)
	htmlFile.setText("${htmlPreface}${body}${htmlEnd}", "UTF-8")
      } catch (Exception e) {
	println "Failed to proces ${inFile}: ${e}"
      }
    }
  }
}


test.dependsOn setUpResources
test {
    systemProperties 'concordion.output.dir': file("${buildDir}/concordion-results")

}



task addVersion () {
  description = "Adds version info for project and dependencies to tokenMap"
}
addVersion.doLast {
  tokenMap["version"] = version
  StringBuilder depsHtml = new StringBuilder()
  versionMap.keySet().sort().each { k ->
    depsHtml.append("<tr><td>${k}</td><td>${versionMap[k]}</td></tr>\n")
  }
  tokenMap["deps"] = depsHtml.toString() 
}

task conc(type: Copy, dependsOn: [test, addVersion]) {
  description = "Runs concordion tests on markdown source"
  from "${buildDir}/concordion-results"
  into "${buildDir}/concordion-formatted"
  filter(ReplaceTokens, tokens: tokenMap)
}



// end tasks for concordion testing
// ****************************************************************** //